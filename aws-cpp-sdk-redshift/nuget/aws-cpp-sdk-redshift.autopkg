configurations {
    Toolset {
    key : "PlatformToolset";
    choices: { v140, v120 };
    };
}

nuget {
    // The nuspec file metadata.
    nuspec {

        // Unique package identifier
        id = AWSSDKCPP-Redshift;

        // Version number. Follows NuGet standards. (currently SemVer 1.0)
        version : @RUNTIME_MAJOR_VERSION@.20121201.@RUNTIME_MINOR_VERSION@;

        // Display name for package.
        title: AWS SDK for C++ (Amazon Redshift);

        // List of package authors.  Braces may be ommited if only one author.
        authors: Amazon Web Services;

        // URL link to the license this package is released under.
        licenseUrl: "http://aws.amazon.com/apache2.0/";

        // URL to the project website (if any).
        projectUrl: "http://github.com/aws/aws-sdk-cpp";

        // URL to an image to be used for package icons.
        iconUrl: "http://media.amazonwebservices.com/aws_singlebox_01.png";

        // If the license this package is being released
        // under has use restrictions, set this to "true".
        requireLicenseAcceptance:false;

        // Brief summary of the package contents. Keep it short!
        summary: "v120 and v140 binary packages along with header files. No custom memory management. Standard Compiler flags used. For more info, see https://github.com/aws/aws-sdk-cpp/blob/master/README.md";

        // Extended description of the package contents.
        description: "<fullname>Amazon Redshift</fullname> <b>Overview</b> <p> This is an interface
   * reference for Amazon Redshift. It contains documentation for one of the
   * programming or command line interfaces you can use to manage Amazon Redshift
   * clusters. Note that Amazon Redshift is asynchronous, which means that some
   * interfaces may require techniques, such as polling or asynchronous callback
   * handlers, to determine when a command has been applied. In this reference, the
   * parameter descriptions indicate whether a change is applied immediately, on the
   * next instance reboot, or during the next maintenance window. For a summary of
   * the Amazon Redshift cluster management interfaces, go to <a
   * href="http://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html">Using
   * the Amazon Redshift Management Interfaces </a>.</p> <p> Amazon Redshift manages
   * all the work of setting up, operating, and scaling a data warehouse:
   * provisioning capacity, monitoring and backing up the cluster, and applying
   * patches and upgrades to the Amazon Redshift engine. You can focus on using your
   * data to acquire new insights for your business and customers. </p> <p>If you are
   * a first-time user of Amazon Redshift, we recommend that you begin by reading the
   * The <a
   * href="http://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html">Amazon
   * Redshift Getting Started Guide</a></p> <p>If you are a database developer, the
   * <a href="http://docs.aws.amazon.com/redshift/latest/dg/welcome.html">Amazon
   * Redshift Database Developer Guide</a> explains how to design, build, query, and
   * maintain the databases that make up your data warehouse. </p>

AWS SDK for C++ provides a modern C++ (version C++ 11 or later) interface for Amazon Web Services (AWS). It is meant to be performant and fully functioning with low- and high-level SDKs, while minimizing dependencies and providing platform portability (Windows, OSX, Linux, and mobile).";

        // Copyright notice.
        copyright: Copyright 2016;

        // Tags of arbitrary text for categorizing and filtering.
        tags: { AWS, Amazon, cloud, aws-sdk-cpp, native, redshift };
    };

    dependencies {
       packages: {
            AWSSDKCPP-Core/[@RUNTIME_MAJOR_VERSION@,@RUNTIME_MAJOR_VERSION_UPPER_BOUND@)
       }
    }

    files {
        // File location information.  This node is critical for all packages, and is
        // where much of the effort is.  All file paths are relative to this .autopkg
        // file's location.

        // All .h and .hpp  files in <src_root>\include, but not in subdirectories.
        // Included for all conditions.
        nestedInclude: {
            #destination = ${d_include}\aws\redshift;
            "..\include\aws\redshift\**\*.h"
        };

        // Include these specific files in the libpath and "copy to output" path only
        // under these pivot conditions.
        [x64,release,v140,dynamic] {  // x64, dll (dynamic linking)
            lib+= { ..\bin\windows\intel64\vs2015\release\aws-cpp-sdk-redshift.lib };
            bin+= { ..\bin\windows\intel64\vs2015\release\aws-cpp-sdk-redshift.dll };
        }

        [x64,release,v120,dynamic] {  // x64, dll (dynamic linking)
            lib+= { ..\bin\windows\intel64\vs2013\release\aws-cpp-sdk-redshift.lib };
            bin+= { ..\bin\windows\intel64\vs2013\release\aws-cpp-sdk-redshift.dll };
        }

        [x64,debug,v140,dynamic] {  // x64, dll (dynamic linking)
            lib+= { ..\bin\windows\intel64\vs2015\debug\aws-cpp-sdk-redshift.lib };
            bin+= { ..\bin\windows\intel64\vs2015\debug\aws-cpp-sdk-redshift.dll };
        }

        [x64,debug,v120,dynamic] {  // x64, dll (dynamic linking)
            lib+= { ..\bin\windows\intel64\vs2013\debug\aws-cpp-sdk-redshift.lib };
            bin+= { ..\bin\windows\intel64\vs2013\debug\aws-cpp-sdk-redshift.dll };
        }

        [x64,release,v140,static] {  // x64, static linking
            lib+= { ..\lib\windows\intel64\vs2015\release\aws-cpp-sdk-redshift.lib };
        }

        [x64,release,v120,static] {  // x64, static linking
            lib+= { ..\lib\windows\intel64\vs2013\release\aws-cpp-sdk-redshift.lib };
        }

        [x64,debug,v140,static] {  // x64, static linking
            lib+= { ..\lib\windows\intel64\vs2015\debug\aws-cpp-sdk-redshift.lib };
        }

        [x64,debug,v120,static] {  // x64, static linking
            lib+= { ..\lib\windows\intel64\vs2013\debug\aws-cpp-sdk-redshift.lib };
        }
    };

    targets {
        // Additional declarations to insert into consuming projects after most of the
        // project settings. (These may NOT be modified in visual studio by a developer
        // consuming this package.)
        // This node is often used to set defines that are required that must be set by
        // the consuming project in order to correctly link to the libraries in this
        // package.  Such defines may be set either globally or only set under specific
        // conditions.
        [dynamic]
        Defines += USE_IMPORT_EXPORT;
    }
}
