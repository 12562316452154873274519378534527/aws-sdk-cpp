#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
\#include <aws/${metadata.projectName}/model/${enumModel.name}.h>
\#include <aws/core/utils/HashingUtils.h>

using namespace Aws::Utils;

#foreach($enumMember in $enumModel.members)
static const int ${enumMember.memberName}_HASH = HashingUtils::HashString("${enumMember.memberStringValue}");
#end

namespace Aws
{
namespace ${metadata.namespace}
{
namespace Model
{
namespace ${enumModel.name}Mapper
{

#if ($enumModel.members.size() > 121)
/*
The if-else chains in this file are converted into a jump table by the compiler,
which allows constant time lookup. The chain has been broken into helper functions
because MSVC has a maximum of 122 chained if-else blocks.
*/
#set ($enumCounter = 0)
#foreach($enum in $enumModel.members)
#if ($enumCounter % 122 == 0)
#set($elseText = "")
#set ($helperIndex =  $enumCounter / 122)

static bool GetEnumForNameHelper${helperIndex}(int hashCode, $enumModel.name& enumValue)
{
#end
  ${elseText}if (hashCode == ${enum.memberName}_HASH)
  {
    enumValue = ${enumModel.name}::${enum.memberName};
    return true;
  }
#set($elseText = "else ")
#set ($enumCounter = $enumCounter + 1)
#if ($enumCounter % 122 == 0 || $enumCounter == $enumModel.members.size())
  return false;
}
#end
#end

#set ($enumCounter = 0)
#foreach($enum in $enumModel.members)
#if ($enumCounter % 122 == 0)
#set($elseText = "")
#set ($helperIndex =  $enumCounter / 122)
static bool GetNameForEnumHelper${helperIndex}($enumModel.name enumValue, Aws::String& value)
{
  switch(enumValue)
  {
#end
  case ${enumModel.name}::${enum.memberName}:
    value = "${enum.memberStringValue}";
    return true;
#set ($enumCounter = $enumCounter + 1)
#if ($enumCounter % 122 == 0 || $enumCounter == $enumModel.members.size())
  default:
    return false;
}
#end
#end
#end

${enumModel.name} Get${enumModel.name}ForName(const Aws::String& name)
{
  int hashCode = HashingUtils::HashString(name.c_str());
#if($enumModel.members.size() > 0 && $enumModel.members.size() < 122)
#foreach($enumMember in $enumModel.members)
  ${elseText}if (hashCode == ${enumMember.memberName}_HASH)
  {
     return ${enumModel.name}::${enumMember.memberName};
  }
#set($elseText = "else ")
#end
  return ${enumModel.name}::NOT_SET;
#else
#set($elseText = "")
#set($maxHelperIndex = $enumModel.members.size() / 122)
  ${enumModel.name} enumValue;
#foreach($helperIndex in [0..$maxHelperIndex])
  ${elseText}if (GetEnumForNameHelper${helperIndex}(hashCode, enumValue))
  {
     return enumValue;
  }
#set($elseText = "else ")
#end
  return ${enumMember.name}::NOT_SET;
#end
}

Aws::String GetNameFor${enumModel.name}(${enumModel.name} value)
{
#if($enumModel.members.size() > 0 && $enumModel.members.size() < 122)
  switch(value)
  {
#foreach($enumMember in $enumModel.members)
  case ${enumModel.name}::${enumMember.memberName}:
    return "${enumMember.memberStringValue}";
#end
  default:
    return "";
  }
#else
#set($maxHelperIndex = $enumModel.members.size() / 122)
  Aws::String value;
#set($elseText = "")
#foreach($helperIndex in [0..$maxHelperIndex])
  ${elseText}if (GetNameForEnumHelper${helperIndex}(enum, value))
  {
    return value;
  }
#set($elseText = "else ")
#end
  return "";
#end
}

} // namespace ${enumModel.name}Mapper
} // namespace Model
} // namespace ${metadata.namespace}
} // namespace Aws
