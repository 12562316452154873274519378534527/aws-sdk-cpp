configurations {
    Toolset {
    key : "PlatformToolset";
    choices: { v140, v120 };
    };
}

nuget {
    // The nuspec file metadata.
    nuspec {

        // Unique package identifier
        id = AWSSDKCPP-OpsWorks;

        // Version number. Follows NuGet standards. (currently SemVer 1.0)
        version : @RUNTIME_MAJOR_VERSION@.20130218.@RUNTIME_MINOR_VERSION@;

        // Display name for package.
        title: AWS SDK for C++ (AWS OpsWorks);

        // List of package authors.  Braces may be ommited if only one author.
        authors: Amazon Web Services;

        // URL link to the license this package is released under.
        licenseUrl: "http://aws.amazon.com/apache2.0/";

        // URL to the project website (if any).
        projectUrl: "http://github.com/aws/aws-sdk-cpp";

        // URL to an image to be used for package icons.
        iconUrl: "http://media.amazonwebservices.com/aws_singlebox_01.png";

        // If the license this package is being released
        // under has use restrictions, set this to "true".
        requireLicenseAcceptance:false;

        // Brief summary of the package contents. Keep it short!
        summary: "v120 and v140 binary packages along with header files. No custom memory management. Standard Compiler flags used. For more info, see https://github.com/aws/aws-sdk-cpp/blob/master/README.md";

        // Extended description of the package contents.
        description: "<fullname>AWS OpsWorks</fullname> <p>Welcome to the <i>AWS OpsWorks API
   * Reference</i>. This guide provides descriptions, syntax, and usage examples
   * about AWS OpsWorks actions and data types, including common parameters and error
   * codes. </p> <p>AWS OpsWorks is an application management service that provides
   * an integrated experience for overseeing the complete application lifecycle. For
   * information about this product, go to the <a
   * href="http://aws.amazon.com/opsworks/">AWS OpsWorks</a> details page. </p> <p>
   * <b>SDKs and CLI</b> </p> <p>The most common way to use the AWS OpsWorks API is
   * by using the AWS Command Line Interface (CLI) or by using one of the AWS SDKs to
   * implement applications in your preferred language. For more information,
   * see:</p> <ul> <li> <a
   * href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html">AWS
   * CLI</a> </li> <li> <a
   * href="http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/opsworks/AWSOpsWorksClient.html">AWS
   * SDK for Java</a> </li> <li> <a
   * href="http://docs.aws.amazon.com/sdkfornet/latest/apidocs/html/N_Amazon_OpsWorks.htm">AWS
   * SDK for .NET</a> </li> <li> <a
   * href="http://docs.aws.amazon.com/aws-sdk-php-2/latest/class-Aws.OpsWorks.OpsWorksClient.html">AWS
   * SDK for PHP 2</a> </li> <li> <a
   * href="http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/OpsWorks/Client.html">AWS
   * SDK for Ruby</a> </li> <li> <a
   * href="http://aws.amazon.com/documentation/sdkforjavascript/">AWS SDK for
   * Node.js</a> </li> <li> <a
   * href="http://docs.pythonboto.org/en/latest/ref/opsworks.html">AWS SDK for
   * Python(Boto)</a> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS OpsWorks supports
   * only one endpoint, opsworks.us-east-1.amazonaws.com (HTTPS), so you must connect
   * to that endpoint. You can then use the API to direct AWS OpsWorks to create
   * stacks in any AWS Region.</p> <p> <b>Chef Versions</b> </p> <p>When you call
   * <a>CreateStack</a>, <a>CloneStack</a>, or <a>UpdateStack</a> we recommend you
   * use the <code>ConfigurationManager</code> parameter to specify the Chef version.
   * The recommended value for Linux stacks is currently 12 (the default is 11.4).
   * Windows stacks use Chef 12.2. For more information, see <a
   * href="http://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-chef11.html">Chef
   * Versions</a>.</p> <note>You can specify Chef 12, 11.10, or 11.4 for your Linux
   * stack. We recommend migrating your existing Linux stacks to Chef 12 as soon as
   * possible.</note>

AWS SDK for C++ provides a modern C++ (version C++ 11 or later) interface for Amazon Web Services (AWS). It is meant to be performant and fully functioning with low- and high-level SDKs, while minimizing dependencies and providing platform portability (Windows, OSX, Linux, and mobile).";

        // Copyright notice.
        copyright: Copyright 2016;

        // Tags of arbitrary text for categorizing and filtering.
        tags: { AWS, Amazon, cloud, aws-sdk-cpp, native, opsworks };
    };

    dependencies {
       packages: {
            AWSSDKCPP-Core/[@RUNTIME_MAJOR_VERSION@,@RUNTIME_MAJOR_VERSION_UPPER_BOUND@)
       }
    }

    files {
        // File location information.  This node is critical for all packages, and is
        // where much of the effort is.  All file paths are relative to this .autopkg
        // file's location.

        // All .h and .hpp  files in <src_root>\include, but not in subdirectories.
        // Included for all conditions.
        nestedInclude: {
            #destination = ${d_include}\aws\opsworks;
            "..\include\aws\opsworks\**\*.h"
        };

        // Include these specific files in the libpath and "copy to output" path only
        // under these pivot conditions.
        [x64,release,v140,dynamic] {  // x64, dll (dynamic linking)
            lib+= { ..\bin\windows\intel64\vs2015\release\aws-cpp-sdk-opsworks.lib };
            bin+= { ..\bin\windows\intel64\vs2015\release\aws-cpp-sdk-opsworks.dll };
        }

        [x64,release,v120,dynamic] {  // x64, dll (dynamic linking)
            lib+= { ..\bin\windows\intel64\vs2013\release\aws-cpp-sdk-opsworks.lib };
            bin+= { ..\bin\windows\intel64\vs2013\release\aws-cpp-sdk-opsworks.dll };
        }

        [x64,debug,v140,dynamic] {  // x64, dll (dynamic linking)
            lib+= { ..\bin\windows\intel64\vs2015\debug\aws-cpp-sdk-opsworks.lib };
            bin+= { ..\bin\windows\intel64\vs2015\debug\aws-cpp-sdk-opsworks.dll };
        }

        [x64,debug,v120,dynamic] {  // x64, dll (dynamic linking)
            lib+= { ..\bin\windows\intel64\vs2013\debug\aws-cpp-sdk-opsworks.lib };
            bin+= { ..\bin\windows\intel64\vs2013\debug\aws-cpp-sdk-opsworks.dll };
        }

        [x64,release,v140,static] {  // x64, static linking
            lib+= { ..\lib\windows\intel64\vs2015\release\aws-cpp-sdk-opsworks.lib };
        }

        [x64,release,v120,static] {  // x64, static linking
            lib+= { ..\lib\windows\intel64\vs2013\release\aws-cpp-sdk-opsworks.lib };
        }

        [x64,debug,v140,static] {  // x64, static linking
            lib+= { ..\lib\windows\intel64\vs2015\debug\aws-cpp-sdk-opsworks.lib };
        }

        [x64,debug,v120,static] {  // x64, static linking
            lib+= { ..\lib\windows\intel64\vs2013\debug\aws-cpp-sdk-opsworks.lib };
        }
    };

    targets {
        // Additional declarations to insert into consuming projects after most of the
        // project settings. (These may NOT be modified in visual studio by a developer
        // consuming this package.)
        // This node is often used to set defines that are required that must be set by
        // the consuming project in order to correctly link to the libraries in this
        // package.  Such defines may be set either globally or only set under specific
        // conditions.
        [dynamic]
        Defines += USE_IMPORT_EXPORT;
    }
}
