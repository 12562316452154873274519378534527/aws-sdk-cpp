configurations {
    Toolset {
    key : "PlatformToolset";
    choices: { v140, v120 };
    };
}

nuget {
    // The nuspec file metadata.
    nuspec {

        // Unique package identifier
        id = AWSSDKCPP-STS;

        // Version number. Follows NuGet standards. (currently SemVer 1.0)
        version : 0.12.20110615.11;

        // Display name for package.
        title: AWS SDK for C++ (AWS Security Token Service);

        // List of package authors.  Braces may be ommited if only one author.
        authors: Amazon Web Services;

        // URL link to the license this package is released under.
        licenseUrl: "http://aws.amazon.com/apache2.0/";

        // URL to the project website (if any).
        projectUrl: "http://github.com/aws/aws-sdk-cpp";

        // URL to an image to be used for package icons.
        iconUrl: "http://media.amazonwebservices.com/aws_singlebox_01.png";

        // If the license this package is being released
        // under has use restrictions, set this to "true".
        requireLicenseAcceptance:false;

        // Brief summary of the package contents. Keep it short!
        summary: "v120 and v140 binary packages along with header files. No custom memory management. Standard Compiler flags used. For more info, see https://github.com/aws/aws-sdk-cpp/blob/master/README.md";

        // Extended description of the package contents.
        description: "<fullname>AWS Security Token Service</fullname> <p>The AWS Security Token
   * Service (STS) is a web service that enables you to request temporary,
   * limited-privilege credentials for AWS Identity and Access Management (IAM) users
   * or for users that you authenticate (federated users). This guide provides
   * descriptions of the STS API. For more detailed information about using this
   * service, go to <a
   * href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html">Temporary
   * Security Credentials</a>. </p> <note> <p> As an alternative to using the API,
   * you can use one of the AWS SDKs, which consist of libraries and sample code for
   * various programming languages and platforms (Java, Ruby, .NET, iOS, Android,
   * etc.). The SDKs provide a convenient way to create programmatic access to STS.
   * For example, the SDKs take care of cryptographically signing requests, managing
   * errors, and retrying requests automatically. For information about the AWS SDKs,
   * including how to download and install them, see the <a
   * href="http://aws.amazon.com/tools/">Tools for Amazon Web Services page</a>. </p>
   * </note> <p>For information about setting up signatures and authorization through
   * the API, go to <a
   * href="http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing
   * AWS API Requests</a> in the <i>AWS General Reference</i>. For general
   * information about the Query API, go to <a
   * href="http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making
   * Query Requests</a> in <i>Using IAM</i>. For information about using security
   * tokens with other AWS products, go to <a
   * href="http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS
   * Services That Work with IAM</a> in the <i>IAM User Guide</i>. </p> <p>If you're
   * new to AWS and need additional technical information about a specific AWS
   * product, you can find the product's technical documentation at <a
   * href="http://aws.amazon.com/documentation/">http://aws.amazon.com/documentation/</a>.
   * </p> <p> <b>Endpoints</b> </p> <p>The AWS Security Token Service (STS) has a
   * default endpoint of https://sts.amazonaws.com that maps to the US East (N.
   * Virginia) region. Additional regions are available and are activated by default.
   * For more information, see <a
   * href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating
   * and Deactivating AWS STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
   * <p>For information about STS endpoints, see <a
   * href="http://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">Regions
   * and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p> <b>Recording API
   * requests</b> </p> <p>STS supports AWS CloudTrail, which is a service that
   * records AWS calls for your AWS account and delivers log files to an Amazon S3
   * bucket. By using information collected by CloudTrail, you can determine what
   * requests were successfully made to STS, who made the request, when it was made,
   * and so on. To learn more about CloudTrail, including how to turn it on and find
   * your log files, see the <a
   * href="http://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html">AWS
   * CloudTrail User Guide</a>.</p>

AWS SDK for C++ provides a modern C++ (version C++ 11 or later) interface for Amazon Web Services (AWS). It is meant to be performant and fully functioning with low- and high-level SDKs, while minimizing dependencies and providing platform portability (Windows, OSX, Linux, and mobile).";

        // Copyright notice.
        copyright: Copyright 2016;

        // Tags of arbitrary text for categorizing and filtering.
        tags: { AWS, Amazon, cloud, aws-sdk-cpp, native, sts };
    };

    dependencies {
       packages: {
            AWSSDKCPP-Core/0.12.1
       }
    }

    files {
        // File location information.  This node is critical for all packages, and is
        // where much of the effort is.  All file paths are relative to this .autopkg
        // file's location.

        // All .h and .hpp  files in <src_root>\include, but not in subdirectories.
        // Included for all conditions.
        nestedInclude: {
            #destination = ${d_include}\aws\sts;
            "..\include\aws\sts\**\*.h"
        };

        // Include these specific files in the libpath and "copy to output" path only
        // under these pivot conditions.
        [x64,release,v140,dynamic] {  // x64, dll (dynamic linking)
            lib+= { ..\bin\windows\intel64\vs2015\release\aws-cpp-sdk-sts.lib };
            bin+= { ..\bin\windows\intel64\vs2015\release\aws-cpp-sdk-sts.dll };
        }

        [x64,release,v120,dynamic] {  // x64, dll (dynamic linking)
            lib+= { ..\bin\windows\intel64\vs2013\release\aws-cpp-sdk-sts.lib };
            bin+= { ..\bin\windows\intel64\vs2013\release\aws-cpp-sdk-sts.dll };
        }

        [x64,debug,v140,dynamic] {  // x64, dll (dynamic linking)
            lib+= { ..\bin\windows\intel64\vs2015\debug\aws-cpp-sdk-sts.lib };
            bin+= { ..\bin\windows\intel64\vs2015\debug\aws-cpp-sdk-sts.dll };
        }

        [x64,debug,v120,dynamic] {  // x64, dll (dynamic linking)
            lib+= { ..\bin\windows\intel64\vs2013\debug\aws-cpp-sdk-sts.lib };
            bin+= { ..\bin\windows\intel64\vs2013\debug\aws-cpp-sdk-sts.dll };
        }

        [x64,release,v140,static] {  // x64, static linking
            lib+= { ..\lib\windows\intel64\vs2015\release\aws-cpp-sdk-sts.lib };
        }

        [x64,release,v120,static] {  // x64, static linking
            lib+= { ..\lib\windows\intel64\vs2013\release\aws-cpp-sdk-sts.lib };
        }

        [x64,debug,v140,static] {  // x64, static linking
            lib+= { ..\lib\windows\intel64\vs2015\debug\aws-cpp-sdk-sts.lib };
        }

        [x64,debug,v120,static] {  // x64, static linking
            lib+= { ..\lib\windows\intel64\vs2013\debug\aws-cpp-sdk-sts.lib };
        }
    };

    targets {
        // Additional declarations to insert into consuming projects after most of the
        // project settings. (These may NOT be modified in visual studio by a developer
        // consuming this package.)
        // This node is often used to set defines that are required that must be set by
        // the consuming project in order to correctly link to the libraries in this
        // package.  Such defines may be set either globally or only set under specific
        // conditions.
        [dynamic]
        Defines += USE_IMPORT_EXPORT;
    }
}
